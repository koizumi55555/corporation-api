// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_usecase is a generated GoMock package.
package mock

import (
	context "context"
	apierr "github.com/koizumi55555/corporation-api/internal/controller/http/httperr/apierr"
	entity "github.com/koizumi55555/corporation-api/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCorporationUseCase is a mock of CorporationUseCase interface.
type MockCorporationUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCorporationUseCaseMockRecorder
}

// MockCorporationUseCaseMockRecorder is the mock recorder for MockCorporationUseCase.
type MockCorporationUseCaseMockRecorder struct {
	mock *MockCorporationUseCase
}

// NewMockCorporationUseCase creates a new mock instance.
func NewMockCorporationUseCase(ctrl *gomock.Controller) *MockCorporationUseCase {
	mock := &MockCorporationUseCase{ctrl: ctrl}
	mock.recorder = &MockCorporationUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCorporationUseCase) EXPECT() *MockCorporationUseCaseMockRecorder {
	return m.recorder
}

// CreateCorporation mocks base method.
func (m *MockCorporationUseCase) CreateCorporation(ctx context.Context, input entity.Corporation) ([]entity.Corporation, apierr.ApiErrF) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCorporation", ctx, input)
	ret0, _ := ret[0].([]entity.Corporation)
	ret1, _ := ret[1].(apierr.ApiErrF)
	return ret0, ret1
}

// CreateCorporation indicates an expected call of CreateCorporation.
func (mr *MockCorporationUseCaseMockRecorder) CreateCorporation(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCorporation", reflect.TypeOf((*MockCorporationUseCase)(nil).CreateCorporation), ctx, input)
}

// DeleteCorporation mocks base method.
func (m *MockCorporationUseCase) DeleteCorporation(ctx context.Context, corp string) apierr.ApiErrF {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCorporation", ctx, corp)
	ret0, _ := ret[0].(apierr.ApiErrF)
	return ret0
}

// DeleteCorporation indicates an expected call of DeleteCorporation.
func (mr *MockCorporationUseCaseMockRecorder) DeleteCorporation(ctx, corp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCorporation", reflect.TypeOf((*MockCorporationUseCase)(nil).DeleteCorporation), ctx, corp)
}

// GetCorporation mocks base method.
func (m *MockCorporationUseCase) GetCorporation(ctx context.Context, corp string) ([]entity.Corporation, apierr.ApiErrF) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCorporation", ctx, corp)
	ret0, _ := ret[0].([]entity.Corporation)
	ret1, _ := ret[1].(apierr.ApiErrF)
	return ret0, ret1
}

// GetCorporation indicates an expected call of GetCorporation.
func (mr *MockCorporationUseCaseMockRecorder) GetCorporation(ctx, corp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCorporation", reflect.TypeOf((*MockCorporationUseCase)(nil).GetCorporation), ctx, corp)
}

// GetCorporationList mocks base method.
func (m *MockCorporationUseCase) GetCorporationList(ctx context.Context) ([]entity.Corporation, apierr.ApiErrF) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCorporationList", ctx)
	ret0, _ := ret[0].([]entity.Corporation)
	ret1, _ := ret[1].(apierr.ApiErrF)
	return ret0, ret1
}

// GetCorporationList indicates an expected call of GetCorporationList.
func (mr *MockCorporationUseCaseMockRecorder) GetCorporationList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCorporationList", reflect.TypeOf((*MockCorporationUseCase)(nil).GetCorporationList), ctx)
}

// UpdateCorporation mocks base method.
func (m *MockCorporationUseCase) UpdateCorporation(ctx context.Context, input entity.Corporation) ([]entity.Corporation, apierr.ApiErrF) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCorporation", ctx, input)
	ret0, _ := ret[0].([]entity.Corporation)
	ret1, _ := ret[1].(apierr.ApiErrF)
	return ret0, ret1
}

// UpdateCorporation indicates an expected call of UpdateCorporation.
func (mr *MockCorporationUseCaseMockRecorder) UpdateCorporation(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCorporation", reflect.TypeOf((*MockCorporationUseCase)(nil).UpdateCorporation), ctx, input)
}

// MockMasterRepository is a mock of MasterRepository interface.
type MockMasterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterRepositoryMockRecorder
}

// MockMasterRepositoryMockRecorder is the mock recorder for MockMasterRepository.
type MockMasterRepositoryMockRecorder struct {
	mock *MockMasterRepository
}

// NewMockMasterRepository creates a new mock instance.
func NewMockMasterRepository(ctrl *gomock.Controller) *MockMasterRepository {
	mock := &MockMasterRepository{ctrl: ctrl}
	mock.recorder = &MockMasterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterRepository) EXPECT() *MockMasterRepositoryMockRecorder {
	return m.recorder
}

// CreateCorporation mocks base method.
func (m *MockMasterRepository) CreateCorporation(input entity.Corporation) ([]entity.Corporation, apierr.ApiErrF) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCorporation", input)
	ret0, _ := ret[0].([]entity.Corporation)
	ret1, _ := ret[1].(apierr.ApiErrF)
	return ret0, ret1
}

// CreateCorporation indicates an expected call of CreateCorporation.
func (mr *MockMasterRepositoryMockRecorder) CreateCorporation(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCorporation", reflect.TypeOf((*MockMasterRepository)(nil).CreateCorporation), input)
}

// DeleteCorporation mocks base method.
func (m *MockMasterRepository) DeleteCorporation(corp string) apierr.ApiErrF {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCorporation", corp)
	ret0, _ := ret[0].(apierr.ApiErrF)
	return ret0
}

// DeleteCorporation indicates an expected call of DeleteCorporation.
func (mr *MockMasterRepositoryMockRecorder) DeleteCorporation(corp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCorporation", reflect.TypeOf((*MockMasterRepository)(nil).DeleteCorporation), corp)
}

// ExistCorporationID mocks base method.
func (m *MockMasterRepository) ExistCorporationID(corp string) apierr.ApiErrF {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistCorporationID", corp)
	ret0, _ := ret[0].(apierr.ApiErrF)
	return ret0
}

// ExistCorporationID indicates an expected call of ExistCorporationID.
func (mr *MockMasterRepositoryMockRecorder) ExistCorporationID(corp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistCorporationID", reflect.TypeOf((*MockMasterRepository)(nil).ExistCorporationID), corp)
}

// ExistCorporationName mocks base method.
func (m *MockMasterRepository) ExistCorporationName(name string) apierr.ApiErrF {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistCorporationName", name)
	ret0, _ := ret[0].(apierr.ApiErrF)
	return ret0
}

// ExistCorporationName indicates an expected call of ExistCorporationName.
func (mr *MockMasterRepositoryMockRecorder) ExistCorporationName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistCorporationName", reflect.TypeOf((*MockMasterRepository)(nil).ExistCorporationName), name)
}

// GetCorporation mocks base method.
func (m *MockMasterRepository) GetCorporation(corp string) ([]entity.Corporation, apierr.ApiErrF) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCorporation", corp)
	ret0, _ := ret[0].([]entity.Corporation)
	ret1, _ := ret[1].(apierr.ApiErrF)
	return ret0, ret1
}

// GetCorporation indicates an expected call of GetCorporation.
func (mr *MockMasterRepositoryMockRecorder) GetCorporation(corp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCorporation", reflect.TypeOf((*MockMasterRepository)(nil).GetCorporation), corp)
}

// GetCorporationList mocks base method.
func (m *MockMasterRepository) GetCorporationList() ([]entity.Corporation, apierr.ApiErrF) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCorporationList")
	ret0, _ := ret[0].([]entity.Corporation)
	ret1, _ := ret[1].(apierr.ApiErrF)
	return ret0, ret1
}

// GetCorporationList indicates an expected call of GetCorporationList.
func (mr *MockMasterRepositoryMockRecorder) GetCorporationList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCorporationList", reflect.TypeOf((*MockMasterRepository)(nil).GetCorporationList))
}

// UpdateCorporation mocks base method.
func (m *MockMasterRepository) UpdateCorporation(input entity.Corporation) ([]entity.Corporation, apierr.ApiErrF) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCorporation", input)
	ret0, _ := ret[0].([]entity.Corporation)
	ret1, _ := ret[1].(apierr.ApiErrF)
	return ret0, ret1
}

// UpdateCorporation indicates an expected call of UpdateCorporation.
func (mr *MockMasterRepositoryMockRecorder) UpdateCorporation(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCorporation", reflect.TypeOf((*MockMasterRepository)(nil).UpdateCorporation), input)
}
